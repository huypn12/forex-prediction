%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% MAIN %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
cfg = config();

[eurusd, featureNames] = eurusdDataset(cfg.dataset.csvPath, "");
eurusdStandardized = eurusdStandardize(eurusd);
[eurusdTrain, YValid, YTest] = eurusdPartition(...
    eurusdStandardized, cfg.dataset.trainSetRatio);
[XTrain, YTrain] = kfold(eurusdTrain, 50);


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [YPred, YTest, rmse, mape] = appLstmUnivariateVerify(YTest, cfg)
end

function [mdl, YPred, YTest, rmse, mape] = appLstmUnivariateRerun(...
        YTrain, YTest, cfg)
    [XTrain, YTrain] = kfold(YTrain, cfg.lstm.maxLags);
    
end



function [XTrain, YTrain] = kfold(trainset, k)
    %% Fold the original dataset into chunks of size lag
    chunkCount = ceil(size(trainset, 1) / k);
    XTrain = zeros(chunkCount, k, size(trainset, 2));
    YTrain = zeros(chunkCount, size(trainset, 2));
    for i = 1:(size(trainset, 1) - k)
        tmpX = trainset(i:(i + k - 1), :);
        tmpY = trainset((i + k), :);
        XTrain(i, :, :) = tmpX;
        YTrain(i, :) = tmpY;
    end
end



function [model, training_options] = lstmUnivariate()
    numFeatures = 1;
    numHiddenUnits = 50;
    model = [ ...
        sequenceInputLayer(numFeatures),...
        lstmLayer(numHiddenUnits, 'OutputMode', 'sequence'),...
        lstmLayer(numHiddenUnits, 'OutputMode', 'sequence'),...
        fullyConnectedLayer(numHiddenUnits),...
        dropoutLayer(0.5),...
        lstmLayer(numHiddenUnits, 'OutputMode', 'sequence'),...
        lstmLayer(numHiddenUnits, 'OutputMode', 'sequence'),...
        fullyConnectedLayer(numResponses),...
        regressionLayer
        ];
    
    training_options = trainingOptions(...
        'adam', ...
        'MaxEpochs', 5, ... %% For test only
        'GradientThreshold',1, ...
        'InitialLearnRate',0.005, ...
        'LearnRateSchedule','piecewise', ...
        'LearnRateDropPeriod',125, ...
        'LearnRateDropFactor',0.2, ...
        'Verbose',0, ...
        'Plots','training-progress', ...
        'ExecutionEnvironment','multi-gpu'...
        );
    
end